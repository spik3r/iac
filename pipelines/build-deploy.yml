trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - app-src/*
      - pipelines/*
      - README.md  # Include README changes for testing

variables:
  - group: vibes-dev-variables
  - group: vibes-dev-secrets
  - name: buildConfiguration
    value: 'Release'
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - checkout: self
      fetchDepth: 0  # Fetch full history for semantic versioning
    
    - task: PowerShell@2
      displayName: 'Generate Semantic Version'
      inputs:
        targetType: 'inline'
        script: |
          # Get the latest tag
          $latestTag = git describe --tags --abbrev=0 2>$null
          if (-not $latestTag) {
            $latestTag = "v0.0.0"
          }
          
          # Parse version numbers
          $version = $latestTag -replace '^v', ''
          $versionParts = $version.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]
          
          # Check if this is a manual version bump (tag on current commit)
          $currentCommitTags = git tag --points-at HEAD
          if ($currentCommitTags) {
            $newVersion = $currentCommitTags | Select-Object -First 1
          } else {
            # Auto-increment patch version
            $patch++
            $newVersion = "v$major.$minor.$patch"
          }
          
          # Set pipeline variables
          Write-Host "##vso[task.setvariable variable=semanticVersion]$newVersion"
          Write-Host "##vso[task.setvariable variable=shortVersion]$($newVersion -replace '^v', '')"
          Write-Host "Generated version: $newVersion"
    
    - task: AzureCLI@2
      displayName: 'Build and Push Docker Image'
      inputs:
        azureSubscription: '$(SERVICE_CONNECTION_NAME)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Login to ACR
          az acr login --name $(CONTAINER_REGISTRY_NAME)
          
          # Build image
          docker build --platform=linux/amd64 \
            -t $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):$(semanticVersion) \
            -t $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):latest \
            app-src/
          
          # Push images
          docker push $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):$(semanticVersion)
          docker push $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):latest
    
    - task: PowerShell@2
      displayName: 'Create Git Tag'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      inputs:
        targetType: 'inline'
        script: |
          # Configure git
          git config user.email "devops@vibes.com"
          git config user.name "Azure DevOps"
          
          # Create and push tag if it doesn't exist
          $existingTag = git tag -l "$(semanticVersion)"
          if (-not $existingTag) {
            git tag "$(semanticVersion)"
            git push origin "$(semanticVersion)"
            Write-Host "Created and pushed tag: $(semanticVersion)"
          } else {
            Write-Host "Tag $(semanticVersion) already exists"
          }

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Development Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Update App Service with New Image'
            inputs:
              azureSubscription: '$(SERVICE_CONNECTION_NAME)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set version environment variables in App Service
                az webapp config appsettings set \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --settings \
                    BUILD_VERSION="$(semanticVersion)" \
                    BUILD_NUMBER="$(Build.BuildNumber)" \
                    BUILD_DATE="$(Build.StartTime)" \
                    GIT_COMMIT="$(Build.SourceVersion)"
                
                # Update App Service to use the new image version
                az webapp config container set \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --docker-custom-image-name $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):$(semanticVersion)
                
                # Restart the app service to ensure new image is pulled
                az webapp restart \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME)
          
          - task: PowerShell@2
            displayName: 'Health Check'
            inputs:
              targetType: 'inline'
              script: |
                $appUrl = "https://$(APP_SERVICE_NAME).azurewebsites.net/version/health"
                $maxAttempts = 10
                $attempt = 1
                
                do {
                  try {
                    Write-Host "Health check attempt $attempt of $maxAttempts..."
                    $response = Invoke-RestMethod -Uri $appUrl -Method Get -TimeoutSec 30
                    if ($response.Status -eq "Healthy") {
                      Write-Host "✅ Application is healthy!"
                      exit 0
                    }
                  } catch {
                    Write-Host "❌ Health check failed: $($_.Exception.Message)"
                  }
                  
                  if ($attempt -lt $maxAttempts) {
                    Write-Host "Waiting 30 seconds before next attempt..."
                    Start-Sleep -Seconds 30
                  }
                  $attempt++
                } while ($attempt -le $maxAttempts)
                
                Write-Host "❌ Application failed health checks after $maxAttempts attempts"
                exit 1

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production Environment'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Update Production App Service'
            inputs:
              azureSubscription: '$(SERVICE_CONNECTION_NAME)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get production app service name (assuming naming convention)
                PROD_APP_SERVICE_NAME=$(echo $(APP_SERVICE_NAME) | sed 's/-dev/-prod/')
                PROD_RESOURCE_GROUP_NAME=$(echo $(RESOURCE_GROUP_NAME) | sed 's/-dev/-prod/')
                
                # Update Production App Service
                az webapp config container set \
                  --name $PROD_APP_SERVICE_NAME \
                  --resource-group $PROD_RESOURCE_GROUP_NAME \
                  --docker-custom-image-name $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):$(semanticVersion)
                
                # Restart the production app service
                az webapp restart \
                  --name $PROD_APP_SERVICE_NAME \
                  --resource-group $PROD_RESOURCE_GROUP_NAME
          
          - task: PowerShell@2
            displayName: 'Production Health Check'
            inputs:
              targetType: 'inline'
              script: |
                $prodAppName = "$(APP_SERVICE_NAME)" -replace "-dev", "-prod"
                $appUrl = "https://$prodAppName.azurewebsites.net/version/health"
                $maxAttempts = 10
                $attempt = 1
                
                do {
                  try {
                    Write-Host "Production health check attempt $attempt of $maxAttempts..."
                    $response = Invoke-RestMethod -Uri $appUrl -Method Get -TimeoutSec 30
                    if ($response.Status -eq "Healthy") {
                      Write-Host "✅ Production application is healthy!"
                      exit 0
                    }
                  } catch {
                    Write-Host "❌ Production health check failed: $($_.Exception.Message)"
                  }
                  
                  if ($attempt -lt $maxAttempts) {
                    Write-Host "Waiting 30 seconds before next attempt..."
                    Start-Sleep -Seconds 30
                  }
                  $attempt++
                } while ($attempt -le $maxAttempts)
                
                Write-Host "❌ Production application failed health checks after $maxAttempts attempts"
                exit 1