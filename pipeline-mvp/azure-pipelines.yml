# Azure DevOps Pipeline for Vibes App - MVP
# This pipeline builds and deploys to the dev environment

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - app-src/*
    - azure-pipelines.yml

variables:
- group: vibes-dev-variables
- group: vibes-secrets
- name: dockerImageTag
  value: '$(Build.BuildNumber)'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Job'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout source code'
    
    - task: Docker@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        command: 'login'
        containerRegistry: '$(CONTAINER_REGISTRY_NAME).azurecr.io'
        azureSubscription: 'vibes-dev-connection'
    
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        repository: '$(DOCKER_IMAGE_NAME)'
        dockerfile: 'app-src/Dockerfile'
        buildContext: 'app-src'
        tags: |
          $(dockerImageTag)
          latest
        arguments: '--platform=linux/amd64'
    
    - task: Docker@2
      displayName: 'Push Docker Image'
      inputs:
        command: 'push'
        repository: '$(DOCKER_IMAGE_NAME)'
        containerRegistry: '$(CONTAINER_REGISTRY_NAME).azurecr.io'
        tags: |
          $(dockerImageTag)
          latest

- stage: Deploy
  displayName: 'Deploy to Dev Environment'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Dev'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Deploy to App Service'
            inputs:
              azureSubscription: 'vibes-dev-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying $(DOCKER_IMAGE_NAME):$(dockerImageTag) to $(APP_SERVICE_NAME)"
                
                # Update App Service with new image
                az webapp config container set \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --docker-custom-image-name $(CONTAINER_REGISTRY_NAME).azurecr.io/$(DOCKER_IMAGE_NAME):$(dockerImageTag)
                
                # Set build metadata as app settings
                az webapp config appsettings set \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME) \
                  --settings \
                    BUILD_VERSION="$(dockerImageTag)" \
                    BUILD_NUMBER="$(Build.BuildNumber)" \
                    BUILD_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                    GIT_COMMIT="$(Build.SourceVersion)"
                
                # Restart app service to ensure new image is loaded
                az webapp restart \
                  --name $(APP_SERVICE_NAME) \
                  --resource-group $(RESOURCE_GROUP_NAME)
                
                echo "Deployment completed successfully"
          
          - task: AzureCLI@2
            displayName: 'Health Check'
            inputs:
              azureSubscription: 'vibes-dev-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                APP_URL="https://$(APP_SERVICE_NAME).azurewebsites.net"
                echo "Performing health check on $APP_URL"
                
                # Wait for app to start
                sleep 30
                
                # Check health endpoint
                HEALTH_URL="$APP_URL/health"
                echo "Checking health endpoint: $HEALTH_URL"
                
                for i in {1..5}; do
                  if curl -f -s "$HEALTH_URL" > /dev/null; then
                    echo "‚úÖ Health check passed"
                    curl -s "$HEALTH_URL" | jq .
                    break
                  else
                    echo "‚è≥ Health check attempt $i failed, retrying in 10 seconds..."
                    sleep 10
                  fi
                  
                  if [ $i -eq 5 ]; then
                    echo "‚ùå Health check failed after 5 attempts"
                    exit 1
                  fi
                done
                
                # Check version endpoint
                VERSION_URL="$APP_URL/version"
                echo "Checking version endpoint: $VERSION_URL"
                curl -s "$VERSION_URL" | jq .
                
                echo "üéâ Deployment verification completed successfully!"